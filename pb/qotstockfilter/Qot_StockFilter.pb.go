// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.10.0
// source: Qot_StockFilter.proto

package qotstockfilter

import (
	_ "github.com/nzai/ftapi4go/pb/common"
	qotcommon "github.com/nzai/ftapi4go/pb/qotcommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 简单属性
type StockField int32

const (
	StockField_StockField_Unknown                        StockField = 0  // 未知
	StockField_StockField_StockCode                      StockField = 1  // 股票代码，不能填区间上下限值。
	StockField_StockField_StockName                      StockField = 2  // 股票名称，不能填区间上下限值。
	StockField_StockField_CurPrice                       StockField = 3  // 最新价 例如填写[10,20]值区间
	StockField_StockField_CurPriceToHighest52WeeksRatio  StockField = 4  // (现价 - 52周最高)/52周最高，对应PC端离52周高点百分比 例如填写[-30,-10]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%，如20实际对应20%）
	StockField_StockField_CurPriceToLowest52WeeksRatio   StockField = 5  // (现价 - 52周最低)/52周最低，对应PC端离52周低点百分比 例如填写[20,40]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	StockField_StockField_HighPriceToHighest52WeeksRatio StockField = 6  // (今日最高 - 52周最高)/52周最高 例如填写[-3,-1]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	StockField_StockField_LowPriceToLowest52WeeksRatio   StockField = 7  // (今日最低 - 52周最低)/52周最低 例如填写[10,70]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	StockField_StockField_VolumeRatio                    StockField = 8  // 量比 例如填写[0.5,30]值区间
	StockField_StockField_BidAskRatio                    StockField = 9  // 委比 例如填写[-20,80.5]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	StockField_StockField_LotPrice                       StockField = 10 // 每手价格 例如填写[40,100]值区间
	StockField_StockField_MarketVal                      StockField = 11 // 市值 例如填写[50000000,3000000000]值区间
	StockField_StockField_PeAnnual                       StockField = 12 // 市盈率(静态) 例如填写[-8,65.3]值区间
	StockField_StockField_PeTTM                          StockField = 13 // 市盈率TTM 例如填写[-10,20.5]值区间
	StockField_StockField_PbRate                         StockField = 14 // 市净率 例如填写[0.5,20]值区间
	StockField_StockField_ChangeRate5min                 StockField = 15 // 五分钟价格涨跌幅 例如填写[-5,6.3]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	StockField_StockField_ChangeRateBeginYear            StockField = 16 // 年初至今价格涨跌幅 例如填写[-50.1,400.7]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	// 基础量价属性
	StockField_StockField_PSTTM          StockField = 17 // 市销率(TTM) 例如填写 [100, 500] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	StockField_StockField_PCFTTM         StockField = 18 // 市现率(TTM) 例如填写 [100, 1000] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	StockField_StockField_TotalShare     StockField = 19 // 总股数 例如填写 [1000000000,1000000000] 值区间 (单位：股)
	StockField_StockField_FloatShare     StockField = 20 // 流通股数 例如填写 [1000000000,1000000000] 值区间 (单位：股)
	StockField_StockField_FloatMarketVal StockField = 21 // 流通市值 例如填写 [1000000000,1000000000] 值区间 (单位：元)
)

// Enum value maps for StockField.
var (
	StockField_name = map[int32]string{
		0:  "StockField_Unknown",
		1:  "StockField_StockCode",
		2:  "StockField_StockName",
		3:  "StockField_CurPrice",
		4:  "StockField_CurPriceToHighest52WeeksRatio",
		5:  "StockField_CurPriceToLowest52WeeksRatio",
		6:  "StockField_HighPriceToHighest52WeeksRatio",
		7:  "StockField_LowPriceToLowest52WeeksRatio",
		8:  "StockField_VolumeRatio",
		9:  "StockField_BidAskRatio",
		10: "StockField_LotPrice",
		11: "StockField_MarketVal",
		12: "StockField_PeAnnual",
		13: "StockField_PeTTM",
		14: "StockField_PbRate",
		15: "StockField_ChangeRate5min",
		16: "StockField_ChangeRateBeginYear",
		17: "StockField_PSTTM",
		18: "StockField_PCFTTM",
		19: "StockField_TotalShare",
		20: "StockField_FloatShare",
		21: "StockField_FloatMarketVal",
	}
	StockField_value = map[string]int32{
		"StockField_Unknown":                        0,
		"StockField_StockCode":                      1,
		"StockField_StockName":                      2,
		"StockField_CurPrice":                       3,
		"StockField_CurPriceToHighest52WeeksRatio":  4,
		"StockField_CurPriceToLowest52WeeksRatio":   5,
		"StockField_HighPriceToHighest52WeeksRatio": 6,
		"StockField_LowPriceToLowest52WeeksRatio":   7,
		"StockField_VolumeRatio":                    8,
		"StockField_BidAskRatio":                    9,
		"StockField_LotPrice":                       10,
		"StockField_MarketVal":                      11,
		"StockField_PeAnnual":                       12,
		"StockField_PeTTM":                          13,
		"StockField_PbRate":                         14,
		"StockField_ChangeRate5min":                 15,
		"StockField_ChangeRateBeginYear":            16,
		"StockField_PSTTM":                          17,
		"StockField_PCFTTM":                         18,
		"StockField_TotalShare":                     19,
		"StockField_FloatShare":                     20,
		"StockField_FloatMarketVal":                 21,
	}
)

func (x StockField) Enum() *StockField {
	p := new(StockField)
	*p = x
	return p
}

func (x StockField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockField) Descriptor() protoreflect.EnumDescriptor {
	return file_Qot_StockFilter_proto_enumTypes[0].Descriptor()
}

func (StockField) Type() protoreflect.EnumType {
	return &file_Qot_StockFilter_proto_enumTypes[0]
}

func (x StockField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StockField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StockField(num)
	return nil
}

// Deprecated: Use StockField.Descriptor instead.
func (StockField) EnumDescriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{0}
}

// 累积属性
type AccumulateField int32

const (
	AccumulateField_AccumulateField_Unknown      AccumulateField = 0 // 未知
	AccumulateField_AccumulateField_ChangeRate   AccumulateField = 1 // 涨跌幅 例如填写[-10.2,20.4]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	AccumulateField_AccumulateField_Amplitude    AccumulateField = 2 // 振幅 例如填写[0.5,20.6]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	AccumulateField_AccumulateField_Volume       AccumulateField = 3 // 日均成交量 例如填写[2000,70000]值区间
	AccumulateField_AccumulateField_Turnover     AccumulateField = 4 // 日均成交额 例如填写[1400,890000]值区间
	AccumulateField_AccumulateField_TurnoverRate AccumulateField = 5 // 换手率 例如填写[2,30]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
)

// Enum value maps for AccumulateField.
var (
	AccumulateField_name = map[int32]string{
		0: "AccumulateField_Unknown",
		1: "AccumulateField_ChangeRate",
		2: "AccumulateField_Amplitude",
		3: "AccumulateField_Volume",
		4: "AccumulateField_Turnover",
		5: "AccumulateField_TurnoverRate",
	}
	AccumulateField_value = map[string]int32{
		"AccumulateField_Unknown":      0,
		"AccumulateField_ChangeRate":   1,
		"AccumulateField_Amplitude":    2,
		"AccumulateField_Volume":       3,
		"AccumulateField_Turnover":     4,
		"AccumulateField_TurnoverRate": 5,
	}
)

func (x AccumulateField) Enum() *AccumulateField {
	p := new(AccumulateField)
	*p = x
	return p
}

func (x AccumulateField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccumulateField) Descriptor() protoreflect.EnumDescriptor {
	return file_Qot_StockFilter_proto_enumTypes[1].Descriptor()
}

func (AccumulateField) Type() protoreflect.EnumType {
	return &file_Qot_StockFilter_proto_enumTypes[1]
}

func (x AccumulateField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccumulateField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccumulateField(num)
	return nil
}

// Deprecated: Use AccumulateField.Descriptor instead.
func (AccumulateField) EnumDescriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{1}
}

// 财务属性
type FinancialField int32

const (
	// 基础财务属性
	FinancialField_FinancialField_Unknown             FinancialField = 0 // 未知
	FinancialField_FinancialField_NetProfit           FinancialField = 1 // 净利润 例如填写[100000000,2500000000]值区间
	FinancialField_FinancialField_NetProfitGrowth     FinancialField = 2 // 净利润增长率 例如填写[-10,300]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	FinancialField_FinancialField_SumOfBusiness       FinancialField = 3 // 营业收入 例如填写[100000000,6400000000]值区间
	FinancialField_FinancialField_SumOfBusinessGrowth FinancialField = 4 // 营收同比增长率 例如填写[-5,200]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	FinancialField_FinancialField_NetProfitRate       FinancialField = 5 // 净利率 例如填写[10,113]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	FinancialField_FinancialField_GrossProfitRate     FinancialField = 6 // 毛利率 例如填写[4,65]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	FinancialField_FinancialField_DebtAssetsRate      FinancialField = 7 // 资产负债率 例如填写[5,470]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	FinancialField_FinancialField_ReturnOnEquityRate  FinancialField = 8 // 净资产收益率 例如填写[20,230]值区间（该字段为百分比字段，默认不展示%，如20实际对应20%）
	// 盈利能力属性
	FinancialField_FinancialField_ROIC                    FinancialField = 9  // 投入资本回报率 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_ROATTM                  FinancialField = 10 // 资产回报率(TTM) 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%。仅适用于年报。）
	FinancialField_FinancialField_EBITTTM                 FinancialField = 11 // 息税前利润(TTM) 例如填写 [1000000000,1000000000] 值区间（单位：元。仅适用于年报。）
	FinancialField_FinancialField_EBITDA                  FinancialField = 12 // 税息折旧及摊销前利润 例如填写 [1000000000,1000000000] 值区间（单位：元）
	FinancialField_FinancialField_OperatingMarginTTM      FinancialField = 13 // 营业利润率(TTM) 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%。仅适用于年报。）
	FinancialField_FinancialField_EBITMargin              FinancialField = 14 // EBIT利润率 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_EBITDAMargin            FinancialField = 15 // EBITDA利润率 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_FinancialCostRate       FinancialField = 16 // 财务成本率 例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_OperatingProfitTTM      FinancialField = 17 // 营业利润(TTM) 例如填写 [1000000000,1000000000] 值区间 （单位：元。仅适用于年报。）
	FinancialField_FinancialField_ShareholderNetProfitTTM FinancialField = 18 // 归属于母公司的净利润 例如填写 [1000000000,1000000000] 值区间 （单位：元。仅适用于年报。）
	FinancialField_FinancialField_NetProfitCashCover      FinancialField = 19 // 盈利中的现金收入比例 例如填写 [1.0,60.0] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%。仅适用于年报。）
	// 偿债能力属性
	FinancialField_FinancialField_CurrentRatio FinancialField = 20 // 流动比率 例如填写 [100,250] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_QuickRatio   FinancialField = 21 // 速动比率 例如填写 [100,250] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	// 清债能力属性
	FinancialField_FinancialField_CurrentAssetRatio      FinancialField = 22 // 流动资产率 例如填写 [10,100] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_CurrentDebtRatio       FinancialField = 23 // 流动负债率 例如填写 [10,100] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_EquityMultiplier       FinancialField = 24 // 权益乘数 例如填写 [100,180] 值区间
	FinancialField_FinancialField_PropertyRatio          FinancialField = 25 // 产权比率 例如填写 [50,100] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_CashAndCashEquivalents FinancialField = 26 // 现金和现金等价 例如填写 [1000000000,1000000000] 值区间（单位：元）
	// 运营能力属性
	FinancialField_FinancialField_TotalAssetTurnover   FinancialField = 27 // 总资产周转率 例如填写 [50,100] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_FixedAssetTurnover   FinancialField = 28 // 固定资产周转率 例如填写 [50,100] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_InventoryTurnover    FinancialField = 29 // 存货周转率 例如填写 [50,100] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_OperatingCashFlowTTM FinancialField = 30 // 经营活动现金流(TTM) 例如填写 [1000000000,1000000000] 值区间（单位：元。仅适用于年报。）
	FinancialField_FinancialField_AccountsReceivable   FinancialField = 31 // 应收帐款净额 例如填写 [1000000000,1000000000] 值区间 例如填写 [1000000000,1000000000] 值区间 （单位：元）
	// 成长能力属性
	FinancialField_FinancialField_EBITGrowthRate                 FinancialField = 32 // EBIT同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_OperatingProfitGrowthRate      FinancialField = 33 // 营业利润同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_TotalAssetsGrowthRate          FinancialField = 34 // 总资产同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_ProfitToShareholdersGrowthRate FinancialField = 35 // 归母净利润同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_ProfitBeforeTaxGrowthRate      FinancialField = 36 // 总利润同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_EPSGrowthRate                  FinancialField = 37 // EPS同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_ROEGrowthRate                  FinancialField = 38 // ROE同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_ROICGrowthRate                 FinancialField = 39 // ROIC同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_NOCFGrowthRate                 FinancialField = 40 // 经营现金流同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_NOCFPerShareGrowthRate         FinancialField = 41 // 每股经营现金流同比增长率 例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	// 现金流属性
	FinancialField_FinancialField_OperatingRevenueCashCover    FinancialField = 42 // 经营现金收入比 例如填写 [10,100] 值区间（该字段为百分比字段，默认省略%，如20实际对应20%）
	FinancialField_FinancialField_OperatingProfitToTotalProfit FinancialField = 43 // 营业利润占比 例如填写 [10,100] 值区间 （该字段为百分比字段，默认省略%，如20实际对应20%）
	// 市场表现属性
	FinancialField_FinancialField_BasicEPS     FinancialField = 44 // 基本每股收益 例如填写 [0.1,10] 值区间 (单位：元)
	FinancialField_FinancialField_DilutedEPS   FinancialField = 45 // 稀释每股收益 例如填写 [0.1,10] 值区间 (单位：元)
	FinancialField_FinancialField_NOCFPerShare FinancialField = 46 // 每股经营现金净流量 例如填写 [0.1,10] 值区间 (单位：元)
)

// Enum value maps for FinancialField.
var (
	FinancialField_name = map[int32]string{
		0:  "FinancialField_Unknown",
		1:  "FinancialField_NetProfit",
		2:  "FinancialField_NetProfitGrowth",
		3:  "FinancialField_SumOfBusiness",
		4:  "FinancialField_SumOfBusinessGrowth",
		5:  "FinancialField_NetProfitRate",
		6:  "FinancialField_GrossProfitRate",
		7:  "FinancialField_DebtAssetsRate",
		8:  "FinancialField_ReturnOnEquityRate",
		9:  "FinancialField_ROIC",
		10: "FinancialField_ROATTM",
		11: "FinancialField_EBITTTM",
		12: "FinancialField_EBITDA",
		13: "FinancialField_OperatingMarginTTM",
		14: "FinancialField_EBITMargin",
		15: "FinancialField_EBITDAMargin",
		16: "FinancialField_FinancialCostRate",
		17: "FinancialField_OperatingProfitTTM",
		18: "FinancialField_ShareholderNetProfitTTM",
		19: "FinancialField_NetProfitCashCover",
		20: "FinancialField_CurrentRatio",
		21: "FinancialField_QuickRatio",
		22: "FinancialField_CurrentAssetRatio",
		23: "FinancialField_CurrentDebtRatio",
		24: "FinancialField_EquityMultiplier",
		25: "FinancialField_PropertyRatio",
		26: "FinancialField_CashAndCashEquivalents",
		27: "FinancialField_TotalAssetTurnover",
		28: "FinancialField_FixedAssetTurnover",
		29: "FinancialField_InventoryTurnover",
		30: "FinancialField_OperatingCashFlowTTM",
		31: "FinancialField_AccountsReceivable",
		32: "FinancialField_EBITGrowthRate",
		33: "FinancialField_OperatingProfitGrowthRate",
		34: "FinancialField_TotalAssetsGrowthRate",
		35: "FinancialField_ProfitToShareholdersGrowthRate",
		36: "FinancialField_ProfitBeforeTaxGrowthRate",
		37: "FinancialField_EPSGrowthRate",
		38: "FinancialField_ROEGrowthRate",
		39: "FinancialField_ROICGrowthRate",
		40: "FinancialField_NOCFGrowthRate",
		41: "FinancialField_NOCFPerShareGrowthRate",
		42: "FinancialField_OperatingRevenueCashCover",
		43: "FinancialField_OperatingProfitToTotalProfit",
		44: "FinancialField_BasicEPS",
		45: "FinancialField_DilutedEPS",
		46: "FinancialField_NOCFPerShare",
	}
	FinancialField_value = map[string]int32{
		"FinancialField_Unknown":                        0,
		"FinancialField_NetProfit":                      1,
		"FinancialField_NetProfitGrowth":                2,
		"FinancialField_SumOfBusiness":                  3,
		"FinancialField_SumOfBusinessGrowth":            4,
		"FinancialField_NetProfitRate":                  5,
		"FinancialField_GrossProfitRate":                6,
		"FinancialField_DebtAssetsRate":                 7,
		"FinancialField_ReturnOnEquityRate":             8,
		"FinancialField_ROIC":                           9,
		"FinancialField_ROATTM":                         10,
		"FinancialField_EBITTTM":                        11,
		"FinancialField_EBITDA":                         12,
		"FinancialField_OperatingMarginTTM":             13,
		"FinancialField_EBITMargin":                     14,
		"FinancialField_EBITDAMargin":                   15,
		"FinancialField_FinancialCostRate":              16,
		"FinancialField_OperatingProfitTTM":             17,
		"FinancialField_ShareholderNetProfitTTM":        18,
		"FinancialField_NetProfitCashCover":             19,
		"FinancialField_CurrentRatio":                   20,
		"FinancialField_QuickRatio":                     21,
		"FinancialField_CurrentAssetRatio":              22,
		"FinancialField_CurrentDebtRatio":               23,
		"FinancialField_EquityMultiplier":               24,
		"FinancialField_PropertyRatio":                  25,
		"FinancialField_CashAndCashEquivalents":         26,
		"FinancialField_TotalAssetTurnover":             27,
		"FinancialField_FixedAssetTurnover":             28,
		"FinancialField_InventoryTurnover":              29,
		"FinancialField_OperatingCashFlowTTM":           30,
		"FinancialField_AccountsReceivable":             31,
		"FinancialField_EBITGrowthRate":                 32,
		"FinancialField_OperatingProfitGrowthRate":      33,
		"FinancialField_TotalAssetsGrowthRate":          34,
		"FinancialField_ProfitToShareholdersGrowthRate": 35,
		"FinancialField_ProfitBeforeTaxGrowthRate":      36,
		"FinancialField_EPSGrowthRate":                  37,
		"FinancialField_ROEGrowthRate":                  38,
		"FinancialField_ROICGrowthRate":                 39,
		"FinancialField_NOCFGrowthRate":                 40,
		"FinancialField_NOCFPerShareGrowthRate":         41,
		"FinancialField_OperatingRevenueCashCover":      42,
		"FinancialField_OperatingProfitToTotalProfit":   43,
		"FinancialField_BasicEPS":                       44,
		"FinancialField_DilutedEPS":                     45,
		"FinancialField_NOCFPerShare":                   46,
	}
)

func (x FinancialField) Enum() *FinancialField {
	p := new(FinancialField)
	*p = x
	return p
}

func (x FinancialField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialField) Descriptor() protoreflect.EnumDescriptor {
	return file_Qot_StockFilter_proto_enumTypes[2].Descriptor()
}

func (FinancialField) Type() protoreflect.EnumType {
	return &file_Qot_StockFilter_proto_enumTypes[2]
}

func (x FinancialField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FinancialField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FinancialField(num)
	return nil
}

// Deprecated: Use FinancialField.Descriptor instead.
func (FinancialField) EnumDescriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{2}
}

// 财务时间周期
type FinancialQuarter int32

const (
	FinancialQuarter_FinancialQuarter_Unknown           FinancialQuarter = 0 // 未知
	FinancialQuarter_FinancialQuarter_Annual            FinancialQuarter = 1 // 年报
	FinancialQuarter_FinancialQuarter_FirstQuarter      FinancialQuarter = 2 // 一季报
	FinancialQuarter_FinancialQuarter_Interim           FinancialQuarter = 3 // 中报
	FinancialQuarter_FinancialQuarter_ThirdQuarter      FinancialQuarter = 4 // 三季报
	FinancialQuarter_FinancialQuarter_MostRecentQuarter FinancialQuarter = 5 // 最近季报
)

// Enum value maps for FinancialQuarter.
var (
	FinancialQuarter_name = map[int32]string{
		0: "FinancialQuarter_Unknown",
		1: "FinancialQuarter_Annual",
		2: "FinancialQuarter_FirstQuarter",
		3: "FinancialQuarter_Interim",
		4: "FinancialQuarter_ThirdQuarter",
		5: "FinancialQuarter_MostRecentQuarter",
	}
	FinancialQuarter_value = map[string]int32{
		"FinancialQuarter_Unknown":           0,
		"FinancialQuarter_Annual":            1,
		"FinancialQuarter_FirstQuarter":      2,
		"FinancialQuarter_Interim":           3,
		"FinancialQuarter_ThirdQuarter":      4,
		"FinancialQuarter_MostRecentQuarter": 5,
	}
)

func (x FinancialQuarter) Enum() *FinancialQuarter {
	p := new(FinancialQuarter)
	*p = x
	return p
}

func (x FinancialQuarter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialQuarter) Descriptor() protoreflect.EnumDescriptor {
	return file_Qot_StockFilter_proto_enumTypes[3].Descriptor()
}

func (FinancialQuarter) Type() protoreflect.EnumType {
	return &file_Qot_StockFilter_proto_enumTypes[3]
}

func (x FinancialQuarter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FinancialQuarter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FinancialQuarter(num)
	return nil
}

// Deprecated: Use FinancialQuarter.Descriptor instead.
func (FinancialQuarter) EnumDescriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{3}
}

// 排序方向
type SortDir int32

const (
	SortDir_SortDir_No      SortDir = 0 // 不排序
	SortDir_SortDir_Ascend  SortDir = 1 // 升序
	SortDir_SortDir_Descend SortDir = 2 // 降序
)

// Enum value maps for SortDir.
var (
	SortDir_name = map[int32]string{
		0: "SortDir_No",
		1: "SortDir_Ascend",
		2: "SortDir_Descend",
	}
	SortDir_value = map[string]int32{
		"SortDir_No":      0,
		"SortDir_Ascend":  1,
		"SortDir_Descend": 2,
	}
)

func (x SortDir) Enum() *SortDir {
	p := new(SortDir)
	*p = x
	return p
}

func (x SortDir) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDir) Descriptor() protoreflect.EnumDescriptor {
	return file_Qot_StockFilter_proto_enumTypes[4].Descriptor()
}

func (SortDir) Type() protoreflect.EnumType {
	return &file_Qot_StockFilter_proto_enumTypes[4]
}

func (x SortDir) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SortDir) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SortDir(num)
	return nil
}

// Deprecated: Use SortDir.Descriptor instead.
func (SortDir) EnumDescriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{4}
}

// 简单属性筛选
type BaseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // StockField 简单属性
	FilterMin  *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为-∞
	FilterMax  *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为+∞
	IsNoFilter *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True代表不筛选，False代表筛选。不传默认为不筛选
	SortDir    *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
}

func (x *BaseFilter) Reset() {
	*x = BaseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseFilter) ProtoMessage() {}

func (x *BaseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseFilter.ProtoReflect.Descriptor instead.
func (*BaseFilter) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{0}
}

func (x *BaseFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *BaseFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *BaseFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *BaseFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *BaseFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

// 累积属性筛选
type AccumulateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // AccumulateField 累积属性
	FilterMin  *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为-∞
	FilterMax  *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为+∞
	IsNoFilter *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True代表不筛选，False代表筛选。不传默认为不筛选
	SortDir    *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
	Days       *int32   `protobuf:"varint,6,req,name=days" json:"days,omitempty"`             // 近几日，累积时间
}

func (x *AccumulateFilter) Reset() {
	*x = AccumulateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccumulateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulateFilter) ProtoMessage() {}

func (x *AccumulateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulateFilter.ProtoReflect.Descriptor instead.
func (*AccumulateFilter) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{1}
}

func (x *AccumulateFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *AccumulateFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *AccumulateFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *AccumulateFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *AccumulateFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

func (x *AccumulateFilter) GetDays() int32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

// 财务属性筛选
type FinancialFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // FinancialField 财务属性
	FilterMin  *float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为-∞
	FilterMax  *float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为+∞
	IsNoFilter *bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True代表不筛选，False代表筛选。不传默认为不筛选
	SortDir    *int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
	Quarter    *int32   `protobuf:"varint,6,req,name=quarter" json:"quarter,omitempty"`       // FinancialQuarter 财报累积时间
}

func (x *FinancialFilter) Reset() {
	*x = FinancialFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialFilter) ProtoMessage() {}

func (x *FinancialFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialFilter.ProtoReflect.Descriptor instead.
func (*FinancialFilter) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{2}
}

func (x *FinancialFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *FinancialFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *FinancialFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *FinancialFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *FinancialFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

func (x *FinancialFilter) GetQuarter() int32 {
	if x != nil && x.Quarter != nil {
		return *x.Quarter
	}
	return 0
}

// 简单属性数据
type BaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // StockField 简单属性
	Value     *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{3}
}

func (x *BaseData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *BaseData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// 累积属性数据
type AccumulateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // AccumulateField 累积属性
	Value     *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Days      *int32   `protobuf:"varint,3,req,name=days" json:"days,omitempty"` // 近几日，累积时间
}

func (x *AccumulateData) Reset() {
	*x = AccumulateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccumulateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulateData) ProtoMessage() {}

func (x *AccumulateData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulateData.ProtoReflect.Descriptor instead.
func (*AccumulateData) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{4}
}

func (x *AccumulateData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *AccumulateData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *AccumulateData) GetDays() int32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

// 财务属性数据
type FinancialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName *int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // FinancialField 财务属性
	Value     *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Quarter   *int32   `protobuf:"varint,3,req,name=quarter" json:"quarter,omitempty"` // FinancialQuarter 财报累积时间
}

func (x *FinancialData) Reset() {
	*x = FinancialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialData) ProtoMessage() {}

func (x *FinancialData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialData.ProtoReflect.Descriptor instead.
func (*FinancialData) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{5}
}

func (x *FinancialData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *FinancialData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *FinancialData) GetQuarter() int32 {
	if x != nil && x.Quarter != nil {
		return *x.Quarter
	}
	return 0
}

// 返回的股票数据
type StockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Security           *qotcommon.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`                     // 股票
	Name               *string             `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                             // 股票名称
	BaseDataList       []*BaseData         `protobuf:"bytes,3,rep,name=baseDataList" json:"baseDataList,omitempty"`             // 筛选后的简单属性数据
	AccumulateDataList []*AccumulateData   `protobuf:"bytes,4,rep,name=accumulateDataList" json:"accumulateDataList,omitempty"` // 筛选后的累积属性数据
	FinancialDataList  []*FinancialData    `protobuf:"bytes,5,rep,name=financialDataList" json:"financialDataList,omitempty"`   // 筛选后的财务属性数据
}

func (x *StockData) Reset() {
	*x = StockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockData) ProtoMessage() {}

func (x *StockData) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockData.ProtoReflect.Descriptor instead.
func (*StockData) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{6}
}

func (x *StockData) GetSecurity() *qotcommon.Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *StockData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StockData) GetBaseDataList() []*BaseData {
	if x != nil {
		return x.BaseDataList
	}
	return nil
}

func (x *StockData) GetAccumulateDataList() []*AccumulateData {
	if x != nil {
		return x.AccumulateDataList
	}
	return nil
}

func (x *StockData) GetFinancialDataList() []*FinancialData {
	if x != nil {
		return x.FinancialDataList
	}
	return nil
}

type C2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin  *int32 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`   // 数据起始点
	Num    *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`       // 请求数据个数，最大200
	Market *int32 `protobuf:"varint,3,req,name=market" json:"market,omitempty"` // Qot_Common::QotMarket股票市场，支持沪股和深股，且沪股和深股不做区分都代表A股市场。
	// 以下为筛选条件，可选字段，不填表示不过滤
	Plate                *qotcommon.Security `protobuf:"bytes,4,opt,name=plate" json:"plate,omitempty"`                               // 板块
	BaseFilterList       []*BaseFilter       `protobuf:"bytes,5,rep,name=baseFilterList" json:"baseFilterList,omitempty"`             // 简单属性过滤器
	AccumulateFilterList []*AccumulateFilter `protobuf:"bytes,6,rep,name=accumulateFilterList" json:"accumulateFilterList,omitempty"` // 累积属性过滤器
	FinancialFilterList  []*FinancialFilter  `protobuf:"bytes,7,rep,name=financialFilterList" json:"financialFilterList,omitempty"`   // 财务属性过滤器
}

func (x *C2S) Reset() {
	*x = C2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{7}
}

func (x *C2S) GetBegin() int32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *C2S) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *C2S) GetMarket() int32 {
	if x != nil && x.Market != nil {
		return *x.Market
	}
	return 0
}

func (x *C2S) GetPlate() *qotcommon.Security {
	if x != nil {
		return x.Plate
	}
	return nil
}

func (x *C2S) GetBaseFilterList() []*BaseFilter {
	if x != nil {
		return x.BaseFilterList
	}
	return nil
}

func (x *C2S) GetAccumulateFilterList() []*AccumulateFilter {
	if x != nil {
		return x.AccumulateFilterList
	}
	return nil
}

func (x *C2S) GetFinancialFilterList() []*FinancialFilter {
	if x != nil {
		return x.FinancialFilterList
	}
	return nil
}

type S2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPage *bool        `protobuf:"varint,1,req,name=lastPage" json:"lastPage,omitempty"` // 是否最后一页了,false:非最后一页,还有窝轮记录未返回; true:已是最后一页
	AllCount *int32       `protobuf:"varint,2,req,name=allCount" json:"allCount,omitempty"` // 该条件请求所有数据的个数
	DataList []*StockData `protobuf:"bytes,3,rep,name=dataList" json:"dataList,omitempty"`  // 返回的股票数据列表
}

func (x *S2C) Reset() {
	*x = S2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C) ProtoMessage() {}

func (x *S2C) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C.ProtoReflect.Descriptor instead.
func (*S2C) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{8}
}

func (x *S2C) GetLastPage() bool {
	if x != nil && x.LastPage != nil {
		return *x.LastPage
	}
	return false
}

func (x *S2C) GetAllCount() int32 {
	if x != nil && x.AllCount != nil {
		return *x.AllCount
	}
	return 0
}

func (x *S2C) GetDataList() []*StockData {
	if x != nil {
		return x.DataList
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{9}
}

func (x *Request) GetC2S() *C2S {
	if x != nil {
		return x.C2S
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetType *int32  `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"` // RetType,返回结果
	RetMsg  *string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode *int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C     *S2C    `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

// Default values for Response fields.
const (
	Default_Response_RetType = int32(-400)
)

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Qot_StockFilter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_Qot_StockFilter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_Qot_StockFilter_proto_rawDescGZIP(), []int{10}
}

func (x *Response) GetRetType() int32 {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return Default_Response_RetType
}

func (x *Response) GetRetMsg() string {
	if x != nil && x.RetMsg != nil {
		return *x.RetMsg
	}
	return ""
}

func (x *Response) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *Response) GetS2C() *S2C {
	if x != nil {
		return x.S2C
	}
	return nil
}

var File_Qot_StockFilter_proto protoreflect.FileDescriptor

var file_Qot_StockFilter_proto_rawDesc = []byte{
	0x0a, 0x15, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x10,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x03, 0x43, 0x32, 0x53, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51,
	0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x14, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x51,
	0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x14, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x03, 0x53, 0x32, 0x43,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x51, 0x6f, 0x74,
	0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x31, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x63,
	0x32, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x52, 0x03,
	0x63, 0x32, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x3a, 0x04, 0x2d, 0x34, 0x30, 0x30, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x32, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x51, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x32, 0x43, 0x52, 0x03, 0x73, 0x32, 0x63, 0x2a, 0x9e, 0x05, 0x0a, 0x0a, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x35, 0x32,
	0x57, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x35, 0x32, 0x57, 0x65, 0x65,
	0x6b, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x35, 0x32, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x35, 0x32, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x09, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4c, 0x6f, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50,
	0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x65, 0x54, 0x54, 0x4d, 0x10, 0x0d, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x62,
	0x52, 0x61, 0x74, 0x65, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x35,
	0x6d, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x53, 0x54, 0x54, 0x4d, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x43,
	0x46, 0x54, 0x54, 0x4d, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10,
	0x13, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x10, 0x15, 0x2a, 0xc9, 0x01, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x10, 0x05, 0x2a, 0xc8, 0x0d, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x53, 0x75, 0x6d, 0x4f, 0x66,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x53, 0x75, 0x6d,
	0x4f, 0x66, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x44, 0x65, 0x62, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x52, 0x4f, 0x49, 0x43, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x52, 0x4f,
	0x41, 0x54, 0x54, 0x4d, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x45, 0x42, 0x49, 0x54, 0x54, 0x54, 0x4d,
	0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x45, 0x42, 0x49, 0x54, 0x44, 0x41, 0x10, 0x0c, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54,
	0x54, 0x4d, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x45, 0x42, 0x49, 0x54, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x45, 0x42, 0x49, 0x54, 0x44, 0x41, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x54, 0x4d, 0x10,
	0x11, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x54, 0x4d, 0x10, 0x12, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x17, 0x12,
	0x23, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x10, 0x18, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x10, 0x19, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64,
	0x43, 0x61, 0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x10,
	0x1a, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x1c, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x10, 0x1d, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x54, 0x4d, 0x10, 0x1e, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x45, 0x42, 0x49, 0x54, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0x20, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x10, 0x21, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0x22,
	0x12, 0x31, 0x0a, 0x2d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x10, 0x23, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10,
	0x24, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x45, 0x50, 0x53, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x10, 0x25, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x52, 0x4f, 0x45, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52,
	0x61, 0x74, 0x65, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x52, 0x4f, 0x49, 0x43, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0x27, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x4f, 0x43, 0x46, 0x47,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0x28, 0x12, 0x29, 0x0a, 0x25, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x4f,
	0x43, 0x46, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x10, 0x29, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x10, 0x2a, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x50, 0x53,
	0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x45, 0x50, 0x53, 0x10,
	0x2d, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x4e, 0x4f, 0x43, 0x46, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x10, 0x2e, 0x2a, 0xd9, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x6d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x51, 0x75, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x10, 0x05, 0x2a, 0x42,
	0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x5f, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x5f, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x10, 0x02, 0x42, 0x41, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x74, 0x75, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x7a, 0x61, 0x69, 0x2f, 0x66, 0x74, 0x61, 0x70, 0x69,
	0x34, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x71, 0x6f, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72,
}

var (
	file_Qot_StockFilter_proto_rawDescOnce sync.Once
	file_Qot_StockFilter_proto_rawDescData = file_Qot_StockFilter_proto_rawDesc
)

func file_Qot_StockFilter_proto_rawDescGZIP() []byte {
	file_Qot_StockFilter_proto_rawDescOnce.Do(func() {
		file_Qot_StockFilter_proto_rawDescData = protoimpl.X.CompressGZIP(file_Qot_StockFilter_proto_rawDescData)
	})
	return file_Qot_StockFilter_proto_rawDescData
}

var file_Qot_StockFilter_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_Qot_StockFilter_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_Qot_StockFilter_proto_goTypes = []interface{}{
	(StockField)(0),            // 0: Qot_StockFilter.StockField
	(AccumulateField)(0),       // 1: Qot_StockFilter.AccumulateField
	(FinancialField)(0),        // 2: Qot_StockFilter.FinancialField
	(FinancialQuarter)(0),      // 3: Qot_StockFilter.FinancialQuarter
	(SortDir)(0),               // 4: Qot_StockFilter.SortDir
	(*BaseFilter)(nil),         // 5: Qot_StockFilter.BaseFilter
	(*AccumulateFilter)(nil),   // 6: Qot_StockFilter.AccumulateFilter
	(*FinancialFilter)(nil),    // 7: Qot_StockFilter.FinancialFilter
	(*BaseData)(nil),           // 8: Qot_StockFilter.BaseData
	(*AccumulateData)(nil),     // 9: Qot_StockFilter.AccumulateData
	(*FinancialData)(nil),      // 10: Qot_StockFilter.FinancialData
	(*StockData)(nil),          // 11: Qot_StockFilter.StockData
	(*C2S)(nil),                // 12: Qot_StockFilter.C2S
	(*S2C)(nil),                // 13: Qot_StockFilter.S2C
	(*Request)(nil),            // 14: Qot_StockFilter.Request
	(*Response)(nil),           // 15: Qot_StockFilter.Response
	(*qotcommon.Security)(nil), // 16: Qot_Common.Security
}
var file_Qot_StockFilter_proto_depIdxs = []int32{
	16, // 0: Qot_StockFilter.StockData.security:type_name -> Qot_Common.Security
	8,  // 1: Qot_StockFilter.StockData.baseDataList:type_name -> Qot_StockFilter.BaseData
	9,  // 2: Qot_StockFilter.StockData.accumulateDataList:type_name -> Qot_StockFilter.AccumulateData
	10, // 3: Qot_StockFilter.StockData.financialDataList:type_name -> Qot_StockFilter.FinancialData
	16, // 4: Qot_StockFilter.C2S.plate:type_name -> Qot_Common.Security
	5,  // 5: Qot_StockFilter.C2S.baseFilterList:type_name -> Qot_StockFilter.BaseFilter
	6,  // 6: Qot_StockFilter.C2S.accumulateFilterList:type_name -> Qot_StockFilter.AccumulateFilter
	7,  // 7: Qot_StockFilter.C2S.financialFilterList:type_name -> Qot_StockFilter.FinancialFilter
	11, // 8: Qot_StockFilter.S2C.dataList:type_name -> Qot_StockFilter.StockData
	12, // 9: Qot_StockFilter.Request.c2s:type_name -> Qot_StockFilter.C2S
	13, // 10: Qot_StockFilter.Response.s2c:type_name -> Qot_StockFilter.S2C
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_Qot_StockFilter_proto_init() }
func file_Qot_StockFilter_proto_init() {
	if File_Qot_StockFilter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Qot_StockFilter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccumulateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccumulateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Qot_StockFilter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Qot_StockFilter_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Qot_StockFilter_proto_goTypes,
		DependencyIndexes: file_Qot_StockFilter_proto_depIdxs,
		EnumInfos:         file_Qot_StockFilter_proto_enumTypes,
		MessageInfos:      file_Qot_StockFilter_proto_msgTypes,
	}.Build()
	File_Qot_StockFilter_proto = out.File
	file_Qot_StockFilter_proto_rawDesc = nil
	file_Qot_StockFilter_proto_goTypes = nil
	file_Qot_StockFilter_proto_depIdxs = nil
}
